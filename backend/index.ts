import { Telegraf } from 'telegraf'
import dotenv from 'dotenv'
import path from 'path'
import LocalSession from 'telegraf-session-local'
import offersRaw from './offers.json'
import { Offer } from './types/types'
import { MyContext, SessionData } from './types/context'
import { getOfferMessage } from './handlers/offerHandlers'
import { handleReplyCategory } from './handlers/replyHandlers'
import { sendKeyboard } from './utils/sendKeyboard'
import { ensureReplyMenu } from './utils/ensureReplyMenu'
import { showOffersInline } from './utils/showOffersInline'
import { getProfileInfo } from './keyboards/mainMenu'
import { getOfferKeyboard } from './keyboards/getOfferKeyboard'

import {
  getActiveCategory,
  setActiveCategory
} from './utils/session'

dotenv.config({ path: path.resolve(__dirname, '.env') })

import { getWebAppLaunchKeyboard } from './keyboards/mainMenu' // –ø—É—Ç—å ‚Äî –æ—Ç–∫—É–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—à—å


const WEBAPP_URL = process.env.WEBAPP_URL || 'https://your-miniapp-link.com'
const bot = new Telegraf<MyContext>(process.env.BOT_TOKEN!)
const offers: Offer[] = offersRaw as Offer[]

bot.use(new LocalSession<SessionData>({ database: 'session_db.json' }).middleware())

// ‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç
bot.start(async ctx => {
  const user = ctx.from
  const defaultCategory: Offer['category'] = 'ua'

  setActiveCategory(ctx, defaultCategory)
  const categoryOffers = offers.filter(o => o.category === defaultCategory)

  await ctx.replyWithAnimation({ source: path.resolve(__dirname, 'img', 'money-5944.gif') })
  await ctx.reply(getProfileInfo(user), { parse_mode: 'Markdown' })
  await showOffersInline(ctx, categoryOffers, defaultCategory)
})

bot.command('webapp', async ctx => {
  await ctx.reply('üåê –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å Web App:', getWebAppLaunchKeyboard(WEBAPP_URL))
})


// üë§ –ü—Ä–æ—Ñ–∏–ª—å
bot.hears('üë§ –ü—Ä–æ—Ñ–∏–ª—å', async ctx => {
  const user = ctx.from
  const category = getActiveCategory(ctx)

  await ctx.replyWithAnimation({ source: path.resolve(__dirname, 'img', 'money-5944.gif') })
  await ctx.reply(getProfileInfo(user), { parse_mode: 'Markdown' })
  await ensureReplyMenu(ctx, category)
})

// ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
bot.hears('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', async ctx => {
  const category = getActiveCategory(ctx)

  await ctx.reply('‚öôÔ∏è –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç:\n‚Ä¢ –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n‚Ä¢ –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫\n‚Ä¢ –∑–∞–¥–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã')
  await ensureReplyMenu(ctx, category)
})

// üìç Reply-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
bot.hears(/(–£–∫—Ä–∞–∏–Ω–∞|–ú–∏—Ä|Crypto)/, ctx => handleReplyCategory(ctx, offers))

// üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è (inline)
bot.action(/^category:(.+)$/, async ctx => {
  const selected = ctx.match[1] as Offer['category']
  setActiveCategory(ctx, selected)

  const filtered = offers.filter(o => o.category === selected)
  await ctx.answerCbQuery()
  await showOffersInline(ctx, filtered, selected)
})

// üì¶ –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ñ—Ñ–µ—Ä–∞
bot.action(/^offer:(.+)$/, async ctx => {
  const offer = offers.find(o => o.id === ctx.match[1])
  await ctx.answerCbQuery()

  if (!offer) return ctx.reply('‚ùå –û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')

  setActiveCategory(ctx, offer.category)

  await ctx.replyWithPhoto(
    { source: path.resolve(__dirname, 'img', offer.image) },
    {
      caption: getOfferMessage(offer),
      parse_mode: 'Markdown',
      reply_markup: getOfferKeyboard(offer)
    }
  )

  await ensureReplyMenu(ctx, offer.category)
})

// ‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ—Ñ—Ñ–µ—Ä–∞–º
bot.action(/^back:offers:(.+)$/, async ctx => {
  const category = ctx.match[1] as 'ua' | 'world' | 'crypto'
  setActiveCategory(ctx, category)

  const filtered = offers.filter(o => o.category === category)
  await ctx.answerCbQuery()
  await showOffersInline(ctx, filtered, category)
})

// ‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
bot.action('back:categories', async ctx => {
  const category = getActiveCategory(ctx)
  await ctx.answerCbQuery()
  await ensureReplyMenu(ctx, category)
})

// üåê WebApp
bot.command('webapp', ctx => {
  return ctx.reply(`üß≠ –û—Ç–∫—Ä—ã—Ç—å WebApp: ${WEBAPP_URL}`)
})

bot.launch()
console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!')