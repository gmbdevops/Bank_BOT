import { MyContext } from '../types/context'
import {
  InlineKeyboardMarkup,
  ReplyKeyboardMarkup
} from 'telegraf/typings/core/types/typegram'

// üéØ –¢–∏–ø –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –º–µ—Ç–∫–∏ –º–µ–Ω—é
export type MenuStyle = 'minimal' | 'emoji' | 'textual' | 'fancy'

/**
 * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫—Ä–∞—Å–∏–≤–æ–π –º–µ—Ç–∫–∏ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∏–ª—è –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
function getSafeMenuLabel(
  style: MenuStyle = 'emoji',
  category: 'ua' | 'world' | 'crypto' = 'ua'
): string {
  const map: Record<MenuStyle, () => string> = {
    minimal: () => '‚ñ´Ô∏è',
    emoji: () => 'üîΩ',
    textual: () => '–ú–µ–Ω—é',
    fancy: () => {
      switch (category) {
        case 'ua':
          return 'üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞'
        case 'world':
          return 'üåç –ú–∏—Ä'
        case 'crypto':
          return 'ü™ô –ö—Ä–∏–ø—Ç–æ'
        default:
          return 'üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏'
      }
    }
  }

  return map[style]?.() ?? 'üìÇ'
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö–µ–ª–ø–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ reply- –∏–ª–∏ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
 */
export async function sendKeyboard(
  ctx: MyContext,
  keyboard:
    | InlineKeyboardMarkup
    | ReplyKeyboardMarkup
    | { reply_markup: InlineKeyboardMarkup | ReplyKeyboardMarkup },
  options?: {
    category?: 'ua' | 'world' | 'crypto'
    style?: MenuStyle
  }
): Promise<void> {
  try {
    const replyMarkup =
      typeof keyboard === 'object' && 'reply_markup' in keyboard
        ? keyboard.reply_markup
        : keyboard

    const style = options?.style ?? 'fancy'
    const category = options?.category ?? ctx.session?.category ?? 'ua'
    const label = getSafeMenuLabel(style, category)

    await ctx.reply(label, { reply_markup: replyMarkup })
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:', err)
  }
}