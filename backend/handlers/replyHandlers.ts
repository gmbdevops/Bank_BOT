import path from 'path'
import { Offer } from '../types/types'
import { MyContext } from '../types/context'
import {
  getOffersWithMenuKeyboard,
  getCategoriesReplyKeyboard
} from '../keyboards/mainMenu'
import { sendKeyboard } from '../utils/sendKeyboard'
import { setActiveCategory } from '../utils/session'

const categoryImageMap: Record<'ua' | 'world' | 'crypto', string> = {
  ua: 'ukraine.png',
  world: 'world.png',
  crypto: 'crypto.png'
}

const keywordMap: Record<string, 'ua' | 'world' | 'crypto'> = {
  —É–∫—Ä–∞–∏–Ω–∞: 'ua',
  ukraine: 'ua',
  –º–∏—Ä: 'world',
  world: 'world',
  crypto: 'crypto',
  –∫—Ä–∏–ø—Ç–æ: 'crypto'
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Ç–µ–∫—Å—Ç–∞ reply-–∫–Ω–æ–ø–∫–∏.
 */
function resolveCategoryFromText(text: string): 'ua' | 'world' | 'crypto' {
  const normalized = text.toLowerCase().replace(/[^\w–∞-—è—ë]/gi, '')

  for (const [key, value] of Object.entries(keywordMap)) {
    if (normalized.includes(key)) return value
  }

  return 'ua'
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ reply-–∫–Ω–æ–ø–∫—É.
 */
export async function handleReplyCategory(ctx: MyContext, offers: Offer[]) {
  if (
    !ctx.message ||
    typeof ctx.message !== 'object' ||
    !('text' in ctx.message)
  ) return

  const rawText = ctx.message.text || ''
  const category = resolveCategoryFromText(rawText)

  setActiveCategory(ctx, category)
  const filtered = offers.filter(o => o.category === category)
  const image = categoryImageMap[category]

  // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
  await sendKeyboard(ctx, getCategoriesReplyKeyboard(category))

  // –®–∞–ø–∫–∞
  if (image) {
    await ctx.replyWithPhoto({ source: path.resolve(__dirname, '../img', image) })
  }

// üì¶ –û—Ñ—Ñ–µ—Ä—ã
if (filtered.length > 0) {
  await ctx.reply(
    `üìã –û—Ñ—Ñ–µ—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *${category.toUpperCase()}*:\n` +
    `üîπ –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –æ—Ñ—Ñ–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.\n` +
    `üí° –ù–µ –∑–∞–±—É–¥—å, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–Ω–∏–∑—É –º–µ–Ω—é.\n`+
    ` \n`,
    {
      parse_mode: 'Markdown',
      reply_markup: getOffersWithMenuKeyboard(filtered)
    }
  )
} else {
  await ctx.reply('üòî –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ñ—Ñ–µ—Ä–æ–≤.')
}
}